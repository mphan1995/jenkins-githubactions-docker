name: ci

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Run tests
        run: pytest -q

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/max-phan-api
    steps:
      - uses: actions/checkout@v4

      - name: Docker login (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Nếu dùng AWS ECR thay vì Docker Hub, bỏ comment block này và bỏ block login Docker Hub ở trên:
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ap-southeast-1
      # - name: Login to Amazon ECR
      #   uses: aws-actions/amazon-ecr-login@v2
      #   id: login-ecr
      # - name: Set ECR image name
      #   run: echo "IMAGE_NAME=${{ steps.login-ecr.outputs.registry }}/max-phan-api" >> $GITHUB_ENV

      - name: Compute tags
        id: tags
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "sha_tag=sha-${SHORT_SHA}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "version_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.sha_tag }}
            ${{ steps.tags.outputs.version_tag && format('{0}:{1}', env.IMAGE_NAME, steps.tags.outputs.version_tag) || '' }}

      - name: Set outputs
        id: out
        run: |
          echo "image=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ steps.tags.outputs.sha_tag }}" >> $GITHUB_OUTPUT

  trigger_jenkins_deploy:
    needs: build_and_push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Jenkins
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JENKINS_JOB: ${{ secrets.JENKINS_JOB }}
          IMAGE: ${{ needs.build_and_push.outputs.image }}
          IMAGE_TAG: ${{ needs.build_and_push.outputs.image_tag }}
        run: |
          set -euo pipefail
          echo "Triggering Jenkins job=$JENKINS_JOB with image=$IMAGE:$IMAGE_TAG"

          # cố lấy crumb, nếu fail thì để rỗng
          CRUMB=""
          if curl -sSf -u "$JENKINS_USER:$JENKINS_API_TOKEN" "$JENKINS_URL/crumbIssuer/api/json" -o /tmp/crumb.json 2>/dev/null; then
            CRUMB=$(python -c "import json,sys;print(json.load(open('/tmp/crumb.json')).get('crumb',''))" || echo "")
          fi

          EXTRA_HEADER=()
          if [ -n "$CRUMB" ]; then
            EXTRA_HEADER=(-H "Jenkins-Crumb:$CRUMB")
          fi

          curl -sS -X POST "$JENKINS_URL/job/$JENKINS_JOB/buildWithParameters" \
            -u "$JENKINS_USER:$JENKINS_API_TOKEN" \
            "${EXTRA_HEADER[@]}" \
            --data-urlencode "IMAGE=$IMAGE" \
            --data-urlencode "IMAGE_TAG=$IMAGE_TAG" \
            --data-urlencode "ENV=dev"
